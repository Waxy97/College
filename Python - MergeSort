# D20128958 L. Keating
# Implementation of MergeSort in Python

# Merge sort splits the array into two halves and continues to do so
# until a single element remains in each subarray, it then merges those arrays
# in a sorted manner.
# 
#This propgram includes two sub arrays. arr[l, m] and arr[m+1, r]
#The merge(arr, l, m, r) assumes the two sub arrays are sorted and merges them together

import time

start_time = time.time()

#this is the first step of merge sort, where they array is divided into 2 sub arrays
def merge(arr, l, m, r): 
	n1 = m - l + 1 #n1 is the first sub array, with l + 1 being the middle element
	n2 = r - m  #n2 is our second sub array, which includes elements between the middle and the right of the original array
	
	L = [0] * (n1) #temporary arrays to hold the elements as theyre partitioned
	R = [0] * (n2) 

	# This sends the data into the temporary arrays
	for i in range(0 , n1): 
		L[i] = arr[l + i] #adds all first elements
  
	for j in range(0 , n2): 
		R[j] = arr[m + 1 + j]  #middle and last elements 

	# Here we Merge the temporary arrays back into arr[l, r] 
	i = 0	 
	j = 0	 
	k = l	 
  
  #the functions below tell the progranm to compare the first elements of
  # adjacent sub arrays and make the smallesr of the two the first element
  #of the sorted array
	while i < n1 and j < n2 :
		if L[i] <= R[j]:
			arr[k] = L[i] 
			i += 1
		else: 
			arr[k] = R[j] 
			j += 1
		k += 1

	while i < n1: 
		arr[k] = L[i] 
		i += 1
		k += 1

	while j < n2: 
		arr[k] = R[j] 
		j += 1
		k += 1

#this is how we get the middle element
#it tells us the left and right index of the sub array that is to be sorted
def mergeSort(arr,l,r): 
	if l < r: 
		m = (l+r)//2

		# using mergeSort to sort the 2 halves 
		mergeSort(arr, l, m) 
		mergeSort(arr, m+1, r)
		# Then we merge
		merge(arr, l, m, r) 


# code used top test the above
arr = [11, 10, 19, 2, 4, 9] 
n = len(arr) 
print ("Entered array is:") 
for i in range(n): 
	print ("%d" %arr[i]), 

mergeSort(arr,0,n-1) 
print ("\n\nSorted array is:") 
for i in range(n): 
	print ("%d" %arr[i]), 

print("\n Time to execute: %s seconds " % (time.time() - start_time))
